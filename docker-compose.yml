
services:
  db:
    container_name: db
    build:
      context: ./services/DB
      dockerfile: Dockerfile
    networks:
      - ft_transcendence
    env_file: .env
    volumes:
      - db_data:/var/lib/mysql
    restart: always
  
  auth-service:
    container_name: ft_t_auth
    build: 
      context: ./api/
      dockerfile: Dockerfile.dev
      args:
        - APP_DIR=auth-service
    volumes:
      -  ./api/auth-service:/app
      - /app/node_modules
   
    env_file: .env
    depends_on:
      - db
    networks:
      - ft_transcendence
    restart: always

  user-service:
    container_name: ft_t_user
    build: 
      context: ./api/
      dockerfile: Dockerfile.dev
      args:
        - APP_DIR=user-service
    volumes:
      - ./api/user-service:/app
      - /app/node_modules
   
    env_file: .env 
    depends_on:
      - db
    networks:
      - ft_transcendence
    restart: always

  game-service:
    container_name: ft_t_game
    build: 
      context: ./api/
      dockerfile: Dockerfile.dev
      args:
        - APP_DIR=game-service
    volumes:
      - ./api/game-service:/app
      - /app/node_modules
   
    env_file: .env
    depends_on:
      - db
    networks:
      - ft_transcendence
    restart: always

  stats-service:
    container_name: ft_t_stats
    build: 
      context: ./api/
      dockerfile: Dockerfile.dev
      args: 
        - APP_DIR=stats-service
    volumes:
      - ./api/stats-service:/app
      - /app/node_modules
    
    env_file: .env
    depends_on:
      - db
    networks:
      - ft_transcendence
    restart: always
  
  caddy:
    container_name: ft_t_caddy
    image: caddy:latest
    volumes:
      - ./services/proxy/Caddyfile:/etc/caddy/Caddyfile
    ports:
      - "8000:80"
      - "8443:443"
    depends_on:
      - auth-service
      - user-service
      - game-service
      - stats-service
    networks:
      - ft_transcendence
    restart: always
  frontend:
    container_name: ft_t_frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - ft_transcendence
    restart: always

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - ES_JAVA_OPTS=-Xms512m -Xmx512m
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  #   networks:
  #     - ft_transcendence
  #   restart: always

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.12.0
  #   volumes:
  #     - ./service/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - ft_transcendence
  #   restart: always

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.12.0
  #   environment:
  #     - ELASTICSEARCH_HOSTS=https://localhost:9200
  #   ports:
  #     - "5601:5601"
  #   depends_on:
  #     - elasticsearch


  # prometheus:
  #   container_name: ft_t_prometheus
  #   image: prom/prometheus
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"

  # grafana:
  #   container_name: ft_t_grafana
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"

volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/data/

  esdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/logs/


networks:
  ft_transcendence:
    driver: bridge
