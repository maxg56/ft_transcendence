CREATE DATABASE IF NOT EXISTS ${DB_NAME};

CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASSWORD}';

ALTER USER 'root'@'localhost' IDENTIFIED BY '${SQL_ROOT_PASSWORD}';
FLUSH PRIVILEGES;

USE ${DB_NAME};

CREATE TABLE IF NOT EXISTS `user` (
	id INT AUTO_INCREMENT PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL,
	avatar TEXT DEFAULT NULL,
	twoFA_enabled BOOLEAN DEFAULT FALSE,
	twoFA_secret VARCHAR(32) DEFAULT NULL,
	elo INT DEFAULT 1000 CHECK (elo >= 0),
	twoFactorSecret VARCHAR(255) DEFAULT NULL,
	is2FAEnabled BOOLEAN DEFAULT FALSE,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	lastLogin_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS matches (
	id INT AUTO_INCREMENT PRIMARY KEY,
	is_pong_game BOOLEAN DEFAULT FALSE,
	playedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	duration_seconds INT NOT NULL DEFAULT 0
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS match_players (
	match_id INT NOT NULL,
	player_id INT NOT NULL,
	score INT NOT NULL DEFAULT 0,
	elo_change INT NOT NULL DEFAULT 0,
	winner BOOLEAN DEFAULT FALSE,
	PRIMARY KEY (match_id, player_id),
	FOREIGN KEY (match_id) REFERENCES matches(id) ON DELETE CASCADE,
	FOREIGN KEY (player_id) REFERENCES `user`(id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS friends (
	id INT AUTO_INCREMENT PRIMARY KEY,
	user1 INT NOT NULL,
	user2 INT NOT NULL,
	status ENUM('pending', 'accepted', 'blocked') DEFAULT 'pending',
	FOREIGN KEY (user1) REFERENCES `user`(id) ON DELETE CASCADE,
	FOREIGN KEY (user2) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;


CREATE TABLE IF NOT EXISTS messages (
	id INT AUTO_INCREMENT PRIMARY KEY,
	sender_id INT NOT NULL,
	channel_type ENUM('public', 'private', 'group') NOT NULL,
	channel_id INT NOT NULL,
	content TEXT NOT NULL,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (sender_id) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS chat_groups (
	id INT AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	owner_id INT NOT NULL,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (owner_id) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS chat_group_members (
	group_id INT NOT NULL,
	user_id INT NOT NULL,
	PRIMARY KEY (group_id, user_id),
	FOREIGN KEY (group_id) REFERENCES chat_groups(id) ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS banned_users (
	user_id INT PRIMARY KEY,
	banned_until TIMESTAMP NOT NULL,
	reason TEXT,
	FOREIGN KEY (user_id) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS user_blocks (
	blocker_id INT NOT NULL,
	blocked_id INT NOT NULL,
	PRIMARY KEY (blocker_id, blocked_id),
	FOREIGN KEY (blocker_id) REFERENCES `user`(id) ON DELETE CASCADE,
	FOREIGN KEY (blocked_id) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS muted_users (
  user_id INT NOT NULL,
  group_id INT NOT NULL,
  muted_until TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, group_id),
  FOREIGN KEY (user_id) REFERENCES `user`(id) ON DELETE CASCADE,
  FOREIGN KEY (group_id) REFERENCES `chat_groups`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS notifications (
	id INT AUTO_INCREMENT PRIMARY KEY,
	user_id INT NOT NULL,
	type VARCHAR(50) NOT NULL,
	message TEXT NOT NULL,
	is_read BOOLEAN DEFAULT FALSE,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (user_id) REFERENCES `user`(id) ON DELETE CASCADE
) ENGINE=InnoDB;

